/*
    Boost Software License - Version 1.0 - August 17th, 2003

    Permission is hereby granted, free of charge, to any person or organization
    obtaining a copy of the software and accompanying documentation covered by
    this license (the "Software") to use, reproduce, display, distribute,
    execute, and transmit the Software, and to prepare derivative works of the
    Software, and to permit third-parties to whom the Software is furnished to
    do so, all subject to the following:

    The copyright notices in the Software and this entire statement, including
    the above license grant, this restriction and the following disclaimer,
    must be included in all copies of the Software, in whole or in part, and
    all derivative works of the Software, unless such copies or derivative
    works are solely in the form of machine-executable object code generated by
    a source language processor.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
    SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
    FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
    ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/


#ifndef BOOST_DYNAMIC_CONFIG_WINDOWS_REGISTRY_BACKEND_HPP
#define BOOST_DYNAMIC_CONFIG_WINDOWS_REGISTRY_BACKEND_HPP
#ifdef WIN32
#include <windows.h>
#include <stdint.h>
#include <stdio.h>
#include <strsafe.h>
#include <string>
#include <sstream>
#include <boost/type_traits.hpp>
#include <boost/utility/enable_if.hpp>
#include "boost/dynamic_config/backend.hpp"
#include "boost/noncopyable.hpp"
namespace boost {

namespace dynamic_config {

class windows_registry_backend
{


public:
#ifdef _UNICODE
	typedef std::wstring string_type;
#else
	typedef std::string string_type;
#endif
	typedef string_type::size_type size_type;

	windows_registry_backend(string_type const & organizationName, string_type const & applicationName) : organizationName_(organizationName), applicationName_(applicationName)
	{	
	}

	~windows_registry_backend()
	{
	}


	size_type erase(string_type const & key);
	void clear();

	template<typename Value>
	bool insert(string_type const & key, Value value);

	template<typename Value>
	bool update(string_type const & key, Value value);

	template<typename Value>
	backend::operation_performed replace(string_type const & key, Value value);
	
	template<typename Integral>
	bool select(string_type const & key, Integral & value, typename enable_if<is_integral<Integral> >::type* dummy = 0);
	bool select(string_type const & key, string_type & value);

	bool remove(string_type const & key);


private:
	typedef unsigned __int64 QWORD; 


	class registry_guard : boost::noncopyable {
	public:
		registry_guard(string_type const & organizationName, string_type const & applicationName);
		HKEY hkey() const;
		~registry_guard();
	private:


		string_type const & organizationName_;
		string_type const & applicationName_;
		HKEY   hkey_;
	};
	static string_type build_default_path(string_type const & orgName, string_type const & appName);
	static bool check_exists(registry_guard const & rguard, string_type const & key);
	static string_type error_message(DWORD errorCode);
	
	template<typename Integral>
	static bool set_registry_key_value(registry_guard const & rguard, string_type const & key, Integral value, typename enable_if<is_integral<Integral> >::type* dummy = 0);
	static bool set_registry_key_value(registry_guard const & rguard, string_type const & key, string_type const & value);


	string_type organizationName_;
	string_type applicationName_;
};


//*************************************************************
//
//  RegDelnodeRecurse()
//
//  Purpose:    Deletes a registry key and all its subkeys / values.
//
//  Parameters: hKeyRoot    -   Root key
//              lpSubKey    -   SubKey to delete
//
//  Return:     TRUE if successful.
//              FALSE if an error occurs.
//
//*************************************************************


inline BOOL RegDelnodeRecurse (HKEY hKeyRoot, LPTSTR lpSubKey)
{
    LPTSTR lpEnd;
    LONG lResult;
    DWORD dwSize;
    TCHAR szName[MAX_PATH];
    HKEY hKey;
    FILETIME ftWrite;

    // First, see if we can delete the key without having
    // to recurse.

    lResult = RegDeleteKey(hKeyRoot, lpSubKey);

    if (lResult == ERROR_SUCCESS) 
        return TRUE;

    lResult = RegOpenKeyEx (hKeyRoot, lpSubKey, 0, KEY_READ, &hKey);

    if (lResult != ERROR_SUCCESS) 
    {
        if (lResult == ERROR_FILE_NOT_FOUND) {
            printf("Key not found.\n");
            return TRUE;
        } 
        else {
            printf("Error opening key.\n");
            return FALSE;
        }
    }

    // Check for an ending slash and add one if it is missing.

    lpEnd = lpSubKey + lstrlen(lpSubKey);

    if (*(lpEnd - 1) != TEXT('\\')) 
    {
        *lpEnd =  TEXT('\\');
        lpEnd++;
        *lpEnd =  TEXT('\0');
    }

    // Enumerate the keys

    dwSize = MAX_PATH;
    lResult = RegEnumKeyEx(hKey, 0, szName, &dwSize, NULL,
                           NULL, NULL, &ftWrite);

    if (lResult == ERROR_SUCCESS) 
    {
        do {

            StringCchCopy (lpEnd, MAX_PATH*2, szName);

            if (!RegDelnodeRecurse(hKeyRoot, lpSubKey)) {
                break;
            }

            dwSize = MAX_PATH;

            lResult = RegEnumKeyEx(hKey, 0, szName, &dwSize, NULL,
                                   NULL, NULL, &ftWrite);

        } while (lResult == ERROR_SUCCESS);
    }

    lpEnd--;
    *lpEnd = TEXT('\0');

    RegCloseKey (hKey);

    // Try again to delete the key.

    lResult = RegDeleteKey(hKeyRoot, lpSubKey);

    if (lResult == ERROR_SUCCESS) 
        return TRUE;

    return FALSE;
}

inline BOOL RegDelnode (HKEY hKeyRoot, LPCTSTR lpSubKey)
{
	TCHAR szDelKey[MAX_PATH*2];

	StringCchCopy (szDelKey, MAX_PATH*2, lpSubKey);
	return RegDelnodeRecurse(hKeyRoot, szDelKey);
}



inline windows_registry_backend::registry_guard::registry_guard( string_type const & organizationName, string_type const & applicationName )
	: organizationName_(organizationName), applicationName_(applicationName)
{
	DWORD  dwDisposition;
	string_type defaultPath = build_default_path(organizationName_,applicationName_);

	if (RegCreateKeyEx(HKEY_CURRENT_USER, defaultPath.c_str(), 0,
		NULL, 0, KEY_ALL_ACCESS, NULL,&hkey_, &dwDisposition) != ERROR_SUCCESS)
	{
		throw std::runtime_error("Unable to create/open key in registry at path: " + defaultPath);
	}
}

inline HKEY windows_registry_backend::registry_guard::hkey() const
{
	return hkey_;
}

inline windows_registry_backend::registry_guard::~registry_guard()
{
	RegCloseKey(hkey_);
}




inline windows_registry_backend::size_type windows_registry_backend::erase( windows_registry_backend::string_type const & key )
{
	return remove(key);
}

inline void windows_registry_backend::clear()
{
	string_type defaultPath = build_default_path(organizationName_,applicationName_);
	RegDelnode(HKEY_CURRENT_USER,defaultPath.c_str());
}


template<typename Value>
bool windows_registry_backend::insert( string_type const & key, Value value)
{
	registry_guard rg(organizationName_,applicationName_);
	if (!check_exists(rg,key))
	{
		return set_registry_key_value(rg,key,value);
	}

	return false;
}

template<typename Value>
bool windows_registry_backend::update( string_type const & key, Value value )
{
	registry_guard rg(organizationName_,applicationName_);
	if (check_exists(rg,key))
	{
		return set_registry_key_value(rg,key,value);
	}

	return false;
}

template<typename Value>
backend::operation_performed windows_registry_backend::replace( string_type const & key, Value value )
{
	// open the registry guard just so to make sure that no delete operation can occur while insert and update are performing.
	registry_guard rg(organizationName_,applicationName_);
	if (insert(key,value))
	{
		return backend::insert;
	} 
	else if (update(key,value))
	{
		return backend::update;
	}
	else
	{
		return backend::none;
	}
}

template<typename Integral>
bool windows_registry_backend::select( string_type const & key, Integral & value, typename enable_if<is_integral<Integral> >::type* dummy /*= 0*/ )
{
	registry_guard rg(organizationName_,applicationName_);
	LONG retVal;
	DWORD valueType;
	QWORD queryVal;
	DWORD dataLen = sizeof(queryVal);
	if ((retVal = RegQueryValueEx(rg.hkey(),key.c_str(),NULL,&valueType,(LPBYTE)(&queryVal),&dataLen)) == ERROR_SUCCESS)
	{
		if (valueType != REG_DWORD && valueType != REG_QWORD)
		{
			throw std::runtime_error("Invalid key-value type of integer");
		}
		else
		{
			value = (Integral)queryVal;
			return true;
		}
	} else if (retVal == ERROR_FILE_NOT_FOUND) {
		return false;
	} else {
		throw std::runtime_error(error_message(GetLastError()));
	}
}

inline bool windows_registry_backend::select( string_type const & key, string_type & value )
{
	registry_guard rg(organizationName_,applicationName_);
	LONG retVal;
	DWORD valueType;
	BYTE queryVal[4096];
	DWORD dataLen = sizeof(queryVal);
	if ((retVal = RegQueryValueEx(rg.hkey(),key.c_str(),NULL,&valueType,(LPBYTE)(&queryVal),&dataLen)) == ERROR_SUCCESS)
	{
		if (valueType != REG_EXPAND_SZ && valueType != REG_SZ)
		{
			throw std::runtime_error("Invalid key-value type of string");
		}
		else
		{
			value.clear();
			value.insert(value.end(),&queryVal[0], &queryVal[0] + dataLen);
			return true;
		}
	} else if (retVal == ERROR_FILE_NOT_FOUND) {
		return false;
	} else {
		throw std::runtime_error(error_message(GetLastError()));
	}
}

inline bool windows_registry_backend::remove( string_type const & key )
{
	registry_guard rg(organizationName_,applicationName_);
	return RegDeleteValue(rg.hkey(),key.c_str()) == ERROR_SUCCESS;
}


inline windows_registry_backend::string_type windows_registry_backend::build_default_path( string_type const & orgName, string_type const & appName )
{
#ifdef _UNICODE
	std::wstringstream ss;
#else
	std::stringstream ss;
#endif
	ss << "Software\\" <<  orgName << '\\' << appName;
	return ss.str();
}

inline bool windows_registry_backend::check_exists( registry_guard const & rguard, string_type const & key )
{
	LPCTSTR lpValueName = key.c_str();
	LONG retVal = 0;
	if ((retVal = RegQueryValueEx(rguard.hkey(),lpValueName,NULL,NULL,NULL,NULL)) == ERROR_SUCCESS)
	{
		return true;
	}
	else if (retVal == ERROR_FILE_NOT_FOUND)
	{
		return false;
	}
	else
	{
		throw std::runtime_error(error_message(GetLastError()));
	}
}

inline windows_registry_backend::string_type windows_registry_backend::error_message( DWORD dw )
{
		// Retrieve the system error message for the last-error code
		LPVOID lpMsgBuf;

		FormatMessage(
			FORMAT_MESSAGE_ALLOCATE_BUFFER | 
			FORMAT_MESSAGE_FROM_SYSTEM |
			FORMAT_MESSAGE_IGNORE_INSERTS,
			NULL,
			dw,
			MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),
			(LPTSTR) &lpMsgBuf,
			0, NULL );


		string_type s((string_type::value_type*)lpMsgBuf);
		LocalFree(lpMsgBuf);
		return s;
}


template<typename Integral>
bool windows_registry_backend::set_registry_key_value(registry_guard const & rguard, string_type const & key, Integral value, typename enable_if<is_integral<Integral> >::type* dummy /*= 0*/ )
{
	if (std::numeric_limits<Integral>::digits <= 32)
	{
		DWORD dwData = value;
		return RegSetValueEx(rguard.hkey(),key.c_str(),NULL,REG_DWORD,(const BYTE*)(&dwData), sizeof(dwData)) == ERROR_SUCCESS;
	}
	else // 64 bits of precision
	{
		QWORD qwData = value;
		return RegSetValueEx(rguard.hkey(),key.c_str(),NULL,REG_QWORD,(const BYTE*)(&qwData), sizeof(qwData)) == ERROR_SUCCESS;
	}
}

inline bool windows_registry_backend::set_registry_key_value(registry_guard const & rguard, string_type const & key, string_type const & value )
{
	return RegSetValueEx(rguard.hkey(),key.c_str(),NULL,REG_EXPAND_SZ,(const BYTE*)value.c_str(),value.length()) == ERROR_SUCCESS;
}





}

}
#endif
#endif // BOOST_DYNAMIC_CONFIG_WINDOWS_REGISTRY_BACKEND_HPP
